/* Auto-generated by genmsg_cpp for file /home/fablab/ros_workspace/robair_demo/msg/InfraredPotholes.msg */
#ifndef ROBAIR_DEMO_MESSAGE_INFRAREDPOTHOLES_H
#define ROBAIR_DEMO_MESSAGE_INFRAREDPOTHOLES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace robair_demo
{
template <class ContainerAllocator>
struct InfraredPotholes_ {
  typedef InfraredPotholes_<ContainerAllocator> Type;

  InfraredPotholes_()
  : hole(false)
  , rear_left(false)
  , rear_center_left(false)
  , rear_center_right(false)
  , rear_right(false)
  , front_left(false)
  , front_center_left(false)
  , front_center_right(false)
  , front_right(false)
  {
  }

  InfraredPotholes_(const ContainerAllocator& _alloc)
  : hole(false)
  , rear_left(false)
  , rear_center_left(false)
  , rear_center_right(false)
  , rear_right(false)
  , front_left(false)
  , front_center_left(false)
  , front_center_right(false)
  , front_right(false)
  {
  }

  typedef uint8_t _hole_type;
  uint8_t hole;

  typedef uint8_t _rear_left_type;
  uint8_t rear_left;

  typedef uint8_t _rear_center_left_type;
  uint8_t rear_center_left;

  typedef uint8_t _rear_center_right_type;
  uint8_t rear_center_right;

  typedef uint8_t _rear_right_type;
  uint8_t rear_right;

  typedef uint8_t _front_left_type;
  uint8_t front_left;

  typedef uint8_t _front_center_left_type;
  uint8_t front_center_left;

  typedef uint8_t _front_center_right_type;
  uint8_t front_center_right;

  typedef uint8_t _front_right_type;
  uint8_t front_right;


  typedef boost::shared_ptr< ::robair_demo::InfraredPotholes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robair_demo::InfraredPotholes_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct InfraredPotholes
typedef  ::robair_demo::InfraredPotholes_<std::allocator<void> > InfraredPotholes;

typedef boost::shared_ptr< ::robair_demo::InfraredPotholes> InfraredPotholesPtr;
typedef boost::shared_ptr< ::robair_demo::InfraredPotholes const> InfraredPotholesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robair_demo::InfraredPotholes_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robair_demo::InfraredPotholes_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robair_demo

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robair_demo::InfraredPotholes_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robair_demo::InfraredPotholes_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robair_demo::InfraredPotholes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "901002cec696ed990f935e50da7eec1e";
  }

  static const char* value(const  ::robair_demo::InfraredPotholes_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x901002cec696ed99ULL;
  static const uint64_t static_value2 = 0x0f935e50da7eec1eULL;
};

template<class ContainerAllocator>
struct DataType< ::robair_demo::InfraredPotholes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robair_demo/InfraredPotholes";
  }

  static const char* value(const  ::robair_demo::InfraredPotholes_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robair_demo::InfraredPotholes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Is there a hole under ANY of the sensors?\n\
bool hole\n\
# Details per sensor\n\
# True = hole\n\
# False = no hole\n\
bool rear_left\n\
bool rear_center_left\n\
bool rear_center_right\n\
bool rear_right\n\
bool front_left\n\
bool front_center_left\n\
bool front_center_right\n\
bool front_right\n\
\n\
\n\
";
  }

  static const char* value(const  ::robair_demo::InfraredPotholes_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robair_demo::InfraredPotholes_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robair_demo::InfraredPotholes_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.hole);
    stream.next(m.rear_left);
    stream.next(m.rear_center_left);
    stream.next(m.rear_center_right);
    stream.next(m.rear_right);
    stream.next(m.front_left);
    stream.next(m.front_center_left);
    stream.next(m.front_center_right);
    stream.next(m.front_right);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct InfraredPotholes_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robair_demo::InfraredPotholes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robair_demo::InfraredPotholes_<ContainerAllocator> & v) 
  {
    s << indent << "hole: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hole);
    s << indent << "rear_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rear_left);
    s << indent << "rear_center_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rear_center_left);
    s << indent << "rear_center_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rear_center_right);
    s << indent << "rear_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rear_right);
    s << indent << "front_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_left);
    s << indent << "front_center_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_center_left);
    s << indent << "front_center_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_center_right);
    s << indent << "front_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_right);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBAIR_DEMO_MESSAGE_INFRAREDPOTHOLES_H

