"""autogenerated by genpy from robair_demo/InfraredPotholes.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class InfraredPotholes(genpy.Message):
  _md5sum = "901002cec696ed990f935e50da7eec1e"
  _type = "robair_demo/InfraredPotholes"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Is there a hole under ANY of the sensors?
bool hole
# Details per sensor
# True = hole
# False = no hole
bool rear_left
bool rear_center_left
bool rear_center_right
bool rear_right
bool front_left
bool front_center_left
bool front_center_right
bool front_right


"""
  __slots__ = ['hole','rear_left','rear_center_left','rear_center_right','rear_right','front_left','front_center_left','front_center_right','front_right']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       hole,rear_left,rear_center_left,rear_center_right,rear_right,front_left,front_center_left,front_center_right,front_right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InfraredPotholes, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.hole is None:
        self.hole = False
      if self.rear_left is None:
        self.rear_left = False
      if self.rear_center_left is None:
        self.rear_center_left = False
      if self.rear_center_right is None:
        self.rear_center_right = False
      if self.rear_right is None:
        self.rear_right = False
      if self.front_left is None:
        self.front_left = False
      if self.front_center_left is None:
        self.front_center_left = False
      if self.front_center_right is None:
        self.front_center_right = False
      if self.front_right is None:
        self.front_right = False
    else:
      self.hole = False
      self.rear_left = False
      self.rear_center_left = False
      self.rear_center_right = False
      self.rear_right = False
      self.front_left = False
      self.front_center_left = False
      self.front_center_right = False
      self.front_right = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9B.pack(_x.hole, _x.rear_left, _x.rear_center_left, _x.rear_center_right, _x.rear_right, _x.front_left, _x.front_center_left, _x.front_center_right, _x.front_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.hole, _x.rear_left, _x.rear_center_left, _x.rear_center_right, _x.rear_right, _x.front_left, _x.front_center_left, _x.front_center_right, _x.front_right,) = _struct_9B.unpack(str[start:end])
      self.hole = bool(self.hole)
      self.rear_left = bool(self.rear_left)
      self.rear_center_left = bool(self.rear_center_left)
      self.rear_center_right = bool(self.rear_center_right)
      self.rear_right = bool(self.rear_right)
      self.front_left = bool(self.front_left)
      self.front_center_left = bool(self.front_center_left)
      self.front_center_right = bool(self.front_center_right)
      self.front_right = bool(self.front_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9B.pack(_x.hole, _x.rear_left, _x.rear_center_left, _x.rear_center_right, _x.rear_right, _x.front_left, _x.front_center_left, _x.front_center_right, _x.front_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.hole, _x.rear_left, _x.rear_center_left, _x.rear_center_right, _x.rear_right, _x.front_left, _x.front_center_left, _x.front_center_right, _x.front_right,) = _struct_9B.unpack(str[start:end])
      self.hole = bool(self.hole)
      self.rear_left = bool(self.rear_left)
      self.rear_center_left = bool(self.rear_center_left)
      self.rear_center_right = bool(self.rear_center_right)
      self.rear_right = bool(self.rear_right)
      self.front_left = bool(self.front_left)
      self.front_center_left = bool(self.front_center_left)
      self.front_center_right = bool(self.front_center_right)
      self.front_right = bool(self.front_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9B = struct.Struct("<9B")
